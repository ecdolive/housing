// References
  // Effective tax rate calculation
  https://taxfoundation.org/how-calculate-property-tax-liability-2/
  http://www.cookcountyassessor.com/Resources/Residential-Tax-Bill.aspx
    tax rate = (mill rate / 1000) * (assessment ratio / 100) * equalization factor
    tax = market value * tax rate
    with home owner exemption: tax - (homestead exemption * (mill rate / 1000))
  // Property tax rates by state
    http://www.tax-rates.org/taxtables/property-tax-by-state
  // City tax rates references
    Atlanta https://www.fultoncountytaxes.org/media/6682/millage_rates_thru_2016.pdf
    Chicago http://www.cookcountyclerk.com/tsd/DocumentLibrary/2016%20Tax%20Rate%20Report.pdf
    San Francisco http://www.sfassessor.org/sites/default/files/notice/FINAL_Notice%20of%20Assessed%20Value_Fact%20Sheet%20%286.10.2015%29.pdf
      http://www.socketsite.com/archives/2016/09/property-tax-rate-in-sf-slated-to-drop-and-where-the-dollars-will-go.html
    Seattle http://blue.kingcounty.com/Assessor/eRealProperty/Dashboard.aspx?ParcelNbr=9195871120
  // Local tax rates
    https://smartasset.com/taxes/california-property-tax-calculator
  // Average rent per city
    https://www.rentjungle.com/average-rent-in-seattle-rent-trends/

// Old input references
  e1a - price
  e2a - down
  e3a - closing
  e4a - upfront
  e5 - hoi
  e6 - flood
  e7 - month
  e8 - year
  e9 - loan / term
  e10 - interest
  e11 - pmi
  e12 - hoa
  e13 - extra
  e14 - tax
  e16 - appreciation
  e17 - rent

// old cookies
  cookies_remove("month");cookies_remove("term");cookies_remove("upfront");cookies_remove("year");

  Cookies.set("appreciation",'{"id":"e16","val":"2.7"}',{expires:3650});
  Cookies.set("assessment",'{"id":"e18","val":"50"}',{expires:3650});
  Cookies.set("closing",'{"id":"e3a","val":"7%"}',{expires:3650});
  Cookies.set("down",'{"id":"e4a","val":"77000"}',{expires:3650});
  Cookies.set("extra",'{"id":"e13","val":"70"}',{expires:3650});
  Cookies.set("flood",'{"id":"e6","val":"1700"}',{expires:3650});
  Cookies.set("hoa",'{"id":"e12","val":"70"}',{expires:3650});
  Cookies.set("hoi",'{"id":"e5","val":"2700"}',{expires:3650});
  Cookies.set("interest",'{"id":"e10","val":"3.7"}',{expires:3650});
  Cookies.set("loan",'{"id":"e9","val":"27"}',{expires:3650});
  Cookies.set("none","san_francisco",{expires:3650});
  Cookies.set("pmi",'{"id":"e11","val":"1.7"}',{expires:3650});
  Cookies.set("price",'{"id":"e1a","val":"700000"}',{expires:3650});
  Cookies.set("purchase_m",'{"id":"e7","val":"11"}',{expires:3650});
  Cookies.set("purchase_y",'{"id":"e8","val":"2007"}',{expires:3650});
  Cookies.set("rent",'{"id":"e17","val":"1700"}',{expires:3650});
  Cookies.set("tax",'{"id":"e14","val":"0.97"}',{expires:3650});

  document.cookie = "purchase_y={%22id%22:%22e8%22%2C%22val%22:%222018%22}; expires=Thu, 18 Dec 2013 12:00:00 UTC";
  purchase_m={%22id%22:%22e7%22%2C%22val%22:%2211%22}; rent={%22id%22:%22e17%22%2C%22val%22:%221700%22}; appreciation={%22id%22:%22e16%22%2C%22val%22:%222.7%22}; tax={%22id%22:%22e14%22%2C%22val%22:%220.97%22}; flood={%22id%22:%22e6%22%2C%22val%22:%221700%22}; hoi={%22id%22:%22e5%22%2C%22val%22:%222700%22}; extra={%22id%22:%22e13%22%2C%22val%22:%2270%22}; hoa={%22id%22:%22e12%22%2C%22val%22:%2270%22}; pmi={%22id%22:%22e11%22%2C%22val%22:%221.7%22}; interest={%22id%22:%22e10%22%2C%22val%22:%223.7%22}; loan={%22id%22:%22e9%22%2C%22val%22:%2227%22}; closing={%22id%22:%22e3a%22%2C%22val%22:%227%25%22}; down={%22id%22:%22e4a%22%2C%22val%22:%2277000%22}; price={%22id%22:%22e1a%22%2C%22val%22:%22700000%22}; none=san_francisco;"

// graph html
  <div class="visualization">
    <div id="sparkline" class="sparkline"></div>
    <div id="sparkline_dates" class="sparkline_dates"></div>
  </div>
  <div class="checkboxes">
    <div class="input"><input type="checkbox" id="cb-balance" checked> Loan balance</div>
    <div class="input"><input type="checkbox" id="cb-payments_t" checked> Total payments</div>
  </div>

// CSS styling radio buttons
  http://jsfiddle.net/La8wQ/313/

// html
  look into <output> tag

// minify and beautify sites
  https://jscompress.com/
  http://jsbeautifier.org/

// old calculate() function with graph
  calculate = function(){
    // read all editable inputs
    var price = parseFloat($('#m_price').val(),10);
    var down_payment = parseFloat($('#m_down_payment').val(),10);
    var closing_costs = parseFloat($('#m_closing_costs').val(),10); // default = home value * .04 (2-5%)
    var paid_at_closing = closing_costs + down_payment;
    var loan_term = parseFloat($('#loan_term').val(),10);
    var interest_rate_y = parseFloat($('#interest_rate_y').val(),10);
    var pmi_rate_y = parseFloat($('#pmi_rate_y').val(),10);
    var appreciation_rate_y = parseFloat($('#appreciation_rate_y').val(),10);
    var extra_payment_m = parseFloat($('#extra_payment_m').val(),10);
    var homeowners_insurance_y = parseFloat($('#homeowners_insurance_y').val(),10); // default = (home value / 1000) * 3.5 http://homeguides.sfgate.com/average-cost-homeowners-insurance-3020.html
    var flood_insurance_y = parseFloat($('#flood_insurance_y').val(),10); // default = (home value / 1000) * 1.8 (low to moderate risk) https://www.floodsmart.gov/floodsmart/pages/residential_coverage/policy_rates.jsp
    var millage_rate_county = parseFloat($('#millage_rate_county').val(),10); // In the majority of states, property value is assessed for property tax purposes every five to seven years. http://real-estate-law.freeadvice.com/real-estate-law/buy_sell_a_home/assessment-property-taxes.htm
    var millage_rate_city = parseFloat($('#millage_rate_city').val(),10);
    var hoa_m = parseFloat($('#hoa_m').val(),10);
    var rent_m = parseFloat($('#rent_m').val(),10);
    var purchase_y = $('#m_purchase_y').val();
    var purchase_m = $('#m_purchase_m').val();
    var date_start = new Date(purchase_y,purchase_m);

    // calculate all non-editable values
    var loan = Math.round(price-down_payment);
    var interest_rate_m = (interest_rate_y/12)/100; // monthly intrest rate
    var pi_m = Math.round(parseFloat(PMT(interest_rate_m,loan_term*12,-loan))); //+(parseFloat(PMT(interest_rate_m,loan_term*12,-loan)).toFixed(2));
    var mortgage_insurance_m = down_payment/loan < .2 ? Math.round(parseFloat((loan*(pmi_rate_y/100))/12)) : 0;
    var mortgage_payment_m = Math.round(pi_m+extra_payment_m);
    var number_payments = Math.round(NPER(interest_rate_m,-mortgage_payment_m,loan));
    var years_pay_off = Number.isInteger(number_payments/12) ? (number_payments/12) : (number_payments/12).toFixed(2);
    var mortgage_payments_t = Number.isInteger(number_payments*mortgage_payment_m) ? (number_payments*mortgage_payment_m) : Math.round(number_payments*mortgage_payment_m);
    var interest_t = Number.isInteger(mortgage_payments_t-loan) ? (mortgage_payments_t-loan) : Math.round(mortgage_payments_t-loan);
    var tax_insurance_dues_m = Math.round(mortgage_insurance_m+(homeowners_insurance_y/12)+(flood_insurance_y/12)+((((price*0.4)/1000)*millage_rate_county)/12)+((((price*0.4)/1000)*millage_rate_city)/12)+(hoa_m));
    var total_payments_m = Math.round(parseFloat(mortgage_payment_m)+parseFloat(tax_insurance_dues_m));
    var rent_y = rent_m*12;
    var hoa_y = hoa_m*12;

    // write valies to all non-editable fields
    $('#loan').val(loan);
    $('#total_payments_m').val(total_payments_m);
    $('#mortgage_payment_m').val(mortgage_payment_m);
    $('#pi_m').val(pi_m);
    $('#number_payments').val(number_payments);
    $('#years_pay_off').val(years_pay_off);
    $('#mortgage_payments_t').val(mortgage_payments_t);
    $('#interest_t').val(interest_t);
    $('#mortgage_insurance_m').val(mortgage_insurance_m);
    $('#tax_insurance_dues_m').val(tax_insurance_dues_m);
    $('#rent_y').val(rent_y);

    // write to insights
    //$('#mi-1').val(paid_at_closing);
    //$('#mi-2').val(price);
    $('#i_total_payments_m').val(total_payments_m);
    $('#i_years_pay_off').val(years_pay_off);

    // build table
    $('table').remove();
    var table = $('<table></table>');
    var thead = $('<thead><tr><th>Year</th><th>Date</th><th>Home value</th><th>Loan balance</th><th>Equity</th><th>Interest paid</th><th>P&amp;I</th><th>PMI</th><th>County tax</th><th>City tax</th><th>Yearly payments</th><th>Monthly payments</th><th>Total payments</th><th>Cost after sale</th><th>Cost of rent</th><th>Cost / equity</th><th>Avg yearly cost</th><th>Avg monthly cost</th></tr></thead>');
    var tbody = $('<tbody></tbody>');
    var trs = [];
    var fls = [];
    var date = [], value = [], balance = [], equity = [], interest = [], pi = [], pmi = [], county = [], city = [], payments_y = [],
      payments_m = [], payments_t = [], cost_sale = [], cost_rent = [], ratio = [], cost_avg_y = [], cost_avg_m = [];
      var rent_equity = [];
    var zero_line = [];
    // year 0
    date[0] = date_display(date_start);
    value[0] = price;
    balance[0] = loan;
    equity[0] = price - loan;
    interest[0] = 0;
    pi[0] = 0;
    pmi[0] = 0;
    county[0] = 0;
    city[0] = 0;
    payments_y[0] = 0;
    payments_m[0] = 0;
    payments_t[0] = down_payment + closing_costs;
    cost_sale[0] = payments_t[0] - equity[0];
    cost_rent[0] = 0;
    ratio[0] = Math.round((payments_t[0] / equity[0]) * 100) / 100;
    cost_avg_y[0] = 0;
    cost_avg_m[0] = 0;
      rent_equity[0] = payments_t[0] - cost_rent[0] - equity[0];
    zero_line[0] = 0;
    var tr = table_row([0,date[0],value[0],balance[0],equity[0],interest[0],pi[0],pmi[0],county[0],city[0],payments_y[0],payments_m[0],payments_t[0],cost_sale[0],cost_rent[0],ratio[0],cost_avg_y[0],cost_avg_m[0]]);
    var fl = '<div title="' + date[0] + '">0</div>';
    trs.push(tr);
    fls.push(fl);
    // years 1+
    var years = Math.ceil(parseFloat(years_pay_off));
    for(var year = 1; year <= years; year++){
      var last = year - 1;
      date_start.setFullYear(date_start.getFullYear() + 1);
      date[year] = date_display(date_start);
      value[year] = Math.round(value[last] * (1 + (appreciation_rate_y / 100)));
      balance[year] = Math.max(0, Math.round(-FV(interest_rate_m, year * 12, -mortgage_payment_m, loan)));
      equity[year] = value[year] - balance[year];
      // need to fix interest, p&i calculations to work correctly for final partial years
      //interest[year] = Math.round(balance[last] > 0 ? (year * 12 * mortgage_payment_m) - (loan - balance[year]) : interest[last]);
      //pi[year] = years_pay_off >= year ? Math.round(mortgage_payment_m * 12) : 0;
      if(year == years && years != years_pay_off){
        // The last year if it's a partial year
        //console.log('year ' + year + ': special');
        var remainder = 1 - (years - years_pay_off);
        interest[year] = Math.round(interest_t);
        pi[year] = Math.round(remainder * 12 * mortgage_payment_m);
      }
      else {
        // All years, except the final year if it's a partial year
        //console.log('year ' + year + ': regular');
        interest[year] = Math.round(year * 12 * mortgage_payment_m) - (loan - balance[year]);
        pi[year] = Math.round(mortgage_payment_m * 12);
      }
      pmi[year] = balance[year] > price * .8 ? Math.round(balance[year] * (pmi_rate_y/100)) : 0;
      county[year] = Math.round(((value[year] * .4) / 1000) * millage_rate_county);
      city[year] = Math.round(((value[year] * .4) / 1000) * millage_rate_city);
      payments_y[year] = pi[year] + pmi[year] + county[year] + city[year] + homeowners_insurance_y + flood_insurance_y + hoa_y;
      payments_m[year] = Math.round(payments_y[year] / 12);
      payments_t[year] = payments_t[last] + payments_y[year];
      cost_sale[year] = payments_t[year] - equity[year];
      cost_rent[year] = rent_y * year;
      ratio[year] = Math.round((payments_t[year] / equity[year]) * 100) / 100;
      cost_avg_y[year] = Math.round(cost_sale[year] / year);
      cost_avg_m[year] = Math.round(cost_avg_y[year] / 12);
        rent_equity[year] = payments_t[year] - cost_rent[year] - equity[year]; // relative_rent_equity
      tr = table_row([year,date[year],value[year],balance[year],equity[year],interest[year],pi[year],pmi[year],county[year],city[year],payments_y[year],payments_m[year],payments_t[year],cost_sale[year],cost_rent[year],ratio[year],cost_avg_y[year],cost_avg_m[year]]);
      fl = '<div title="' + date[year] + '">' + year + '</div>';
      trs.push(tr);
      fls.push(fl);
      zero_line.push(0);
    }
    //$('body').append(table.append(thead,tbody.html(trs)));
    $('#sparkline_dates').html(fls);

    // build graph
    // http://omnipotent.net/jquery.sparkline/#tooltips
    // http://omnipotent.net/jquery.sparkline/#s-about
    var range = [[0,1],value,balance,equity,interest,payments_t,rent_equity];
    var max_val = range.map(function(x){
      return Math.max.apply(null,x);
    });
    var min_val = range.map(function(x){
      return Math.min.apply(null,x);
    });
    max_val = Math.max.apply(null,max_val);
    min_val = Math.min.apply(null,min_val);
    var sl_width = 100 - (100/years); // make the sparkline width match the year labels
    $("#sparkline").css({ width: sl_width + '%'});
    $("#sparkline").sparkline(value,{
      chartRangeMax: max_val,
      chartRangeMin: min_val,
      fillColor: false,
      height: '360px',
      highlightSpotColor: 'rgb(255,0,0)',
      highlightLineColor: 'rgba(255,0,0,.3)',
      lineColor: 'rgb(255,0,0)',
      minSpotColor: false,
      maxSpotColor: false,
      spotColor: false,
      spotRadius: 3,
      tooltipPrefix: 'Home value: ',
      type: 'line',
      width: '100%'
    });
    if($('#cb-balance').is(':checked')){
      $("#sparkline").sparkline(balance,{
        chartRangeMax: max_val,
        chartRangeMin: min_val,
        composite: true,
        fillColor: false,
        highlightSpotColor: 'rgb(0,255,0)',
        highlightLineColor: false,
        lineColor: 'rgb(0,255,0)',
        minSpotColor: false,
        maxSpotColor: false,
        spotColor: false,
        spotRadius: 3,
        tooltipPrefix: 'Loan balance: ',
        type: 'line'
      });
    }
    $("#sparkline").sparkline(equity,{
      chartRangeMax: max_val,
      chartRangeMin: min_val,
      composite: true,
      fillColor: false,
      highlightSpotColor: 'rgb(0,0,255)',
      highlightLineColor: false,
      lineColor: 'rgb(0,0,255)',
      minSpotColor: false,
      maxSpotColor: false,
      spotColor: false,
      spotRadius: 3,
      tooltipPrefix: 'Equity: ',
      type: 'line'
    });
    $("#sparkline").sparkline(interest,{
      chartRangeMax: max_val,
      chartRangeMin: min_val,
      composite: true,
      fillColor: false,
      highlightSpotColor: 'rgb(150,50,150)',
      highlightLineColor: false,
      lineColor: 'rgb(150,50,150)',
      minSpotColor: false,
      maxSpotColor: false,
      spotColor: false,
      spotRadius: 3,
      tooltipPrefix: 'Interest paid: ',
      type: 'line'
    });
    if($('#cb-payments_t').is(':checked')){
      $("#sparkline").sparkline(payments_t,{
        chartRangeMax: max_val,
        chartRangeMin: min_val,
        composite: true,
        fillColor: false,
        highlightSpotColor: 'rgb(150,50,150)',
        highlightLineColor: false,
        lineColor: 'rgb(150,0,0)',
        minSpotColor: false,
        maxSpotColor: false,
        spotColor: false,
        spotRadius: 3,
        tooltipPrefix: 'Total payments: ',
        type: 'line'
      });
    }
    $("#sparkline").sparkline(zero_line,{
      chartRangeMax: max_val,
      chartRangeMin: min_val,
      composite: true,
      fillColor: false,
      highlightSpotColor: '#f00',
      highlightLineColor: false,
      lineColor: 'rgba(0,0,0,.1)',
      minSpotColor: false,
      maxSpotColor: false,
      spotColor: false,
      spotRadius: false,
      tooltipFormat: $.spformat('{{value}}','tooltip-class'),
      tooltipPrefix: false,
      type: 'line'
    });
    $("#sparkline").sparkline(cost_rent,{
      chartRangeMax: max_val,
      chartRangeMin: min_val,
      composite: true,
      fillColor: false,
      highlightSpotColor: 'rgb(150,150,150)',
      highlightLineColor: false,
      lineColor: 'rgb(150,150,150)',
      minSpotColor: false,
      maxSpotColor: false,
      spotColor: false,
      spotRadius: 3,
      tooltipPrefix: 'Cost of rent: ',
      type: 'line'
    });

    $("#sparkline").sparkline(rent_equity,{
      chartRangeMax: max_val,
      chartRangeMin: min_val,
      composite: true,
      fillColor: false,
      highlightSpotColor: 'rgb(150,150,150)',
      highlightLineColor: false,
      lineColor: 'rgb(150,150,150)',
      minSpotColor: false,
      maxSpotColor: false,
      spotColor: false,
      spotRadius: 3,
      tooltipPrefix: 'Equivalent rent equity: ',
      type: 'line'
    });
  };
